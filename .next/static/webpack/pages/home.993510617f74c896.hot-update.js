"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/home",{

/***/ "(pages-dir-browser)/./data/projects.json":
/*!****************************!*\
  !*** ./data/projects.json ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = /*#__PURE__*/JSON.parse('[{"id":"youtube-clone","title":"YouTube Clone","tagline":"Full-stack streaming platform with networking foundations","description":"This project was built as part of my computer networking studies, focusing on the application layer and socket programming. The goal was to solidify both programming and networking skills by recreating a YouTube-like platform with real-time features. The system integrates a Django backend for core APIs, a React.js frontend for the interface, and a simulated CDN server built with Node.js and Next.js. Real-time asynchronous communication was implemented using Node.js, while TailwindCSS and HTML handled styling and layouts. In addition, I wrote Python tests to ensure reliability and maintainability. This experience not only strengthened my backend and frontend development skills but also deepened my understanding of networking concepts such as socket programming and distributed systems.","tech":["React.js","Next.js","Django","Node.js","TailwindCSS","HTML","Python (Testing)"],"images":["/images/projects/youtube01.jpeg","/images/projects/youtube-2.png"],"github":"https://github.com/Polymath-Kaila/Youtube-clone","demo":""},{"id":"clinicx","title":"ClinicX","tagline":"Robust API-driven clinic management system","description":"ClinicX is a backend-only healthcare management system built with Django, designed to support the day-to-day operations of modern clinics. It provides a secure and scalable set of APIs that allow multiple stakeholders to interact: patients can manage appointments and access their medical history, doctors can oversee consultations, update patient records, and prescribe treatments, while suppliers handle inventory and delivery workflows. The system enforces strict role-based access control, ensuring data privacy and compliance with healthcare standards. This project strengthened my expertise in designing RESTful APIs, implementing authentication/authorization, and building reliable backend architectures for real-world use cases.","tech":["Django","Django REST Framework (DRF)","PostgreSQL","JWT Authentication","Role-Based Access Control","Automated Testing"],"images":["/images/projects/clinicx01.jpeg","/images/projects/clinicx-2.png"],"github":"https://github.com/Polymath-Kaila/clinicx","demo":""},{"id":"uniconnect","title":"UniConnect","tagline":"Andela-inspired platform for university tech communities","description":"UniConnect is a community-driven platform built to connect university students in Kenya who are passionate about technology. Inspired by Andela, it provides a space where students can showcase projects, form teams, share resources, and collaborate on real-world tech initiatives. The goal of UniConnect is to bridge the gap between classroom learning and practical experience by fostering peer mentorship and project-based learning. The system was designed to support user profiles, team formation, and discussion boards, laying the foundation for a scalable ecosystem where students can grow together and prepare for the professional tech landscape.","tech":["Django","Django REST Framework (DRF)","PostgreSQL","JWT Authentication","REST APIs","Role-Based Access Control","React.js","TailwindCSS","HTML"],"images":["/images/projects/uniconnect01.jpeg","/images/projects/uniconnect-2.png"],"github":"https://github.com/Polymath-Kaila/UniConnect","demo":""},{"id":"amka","title":"AMKA — Amua Moja Kenya Alliance web app backend","tagline":"Backend platform powering a youth movement","description":"AMKA (Amua Moja Kenya Alliance) is a backend-only platform built to support a youth-driven movement in Kenya. The system provides a set of secure and scalable APIs designed to enable community mobilization, information sharing, and collaborative decision-making. Core features include user registration and authentication, role-based access for coordinators and members, and endpoints to manage campaigns, events, and discussions. The platform emphasizes data integrity, security, and scalability to ensure it can handle a growing and diverse base of young users. This project strengthened my ability to design backend systems that align with social impact goals, combining technical rigor with civic engagement.","tech":["Django","Django REST Framework (DRF)","PostgreSQL","JWT Authentication","Role-Based Access Control","RESTful APIs","Automated Testing"],"images":["/images/projects/amka04.jpeg","/images/projects/amka-2.png"],"github":"https://github.com/Polymath-Kaila/Amka-backend","demo":""},{"id":"shadowtalk","title":"ShadowTalk","tagline":"Secure end-to-end encrypted web chat app","description":"ShadowTalk is a secure, end-to-end encrypted web-based chat application built with a multi-stack approach to ensure both performance and top-level security. The platform leverages Django for backend services and data handling, Node.js for real-time communication using WebSockets, and React with TailwindCSS for an intuitive user interface. ShadowTalk implements strong encryption mechanisms to guarantee message confidentiality, integrity, and privacy, while also following best practices in authentication, session management, and secure API design. The system was designed as a proof-of-concept for secure communications, showcasing expertise in real-time systems, encryption, and full-stack application architecture.","tech":["Django","Django REST Framework (DRF)","Node.js (WebSockets)","React.js","TailwindCSS","Python","JavaScript","HTML","End-to-End Encryption"],"images":["/images/projects/shadowtalk1.png","/images/projects/shadowtalk-2.png"],"github":"https://github.com/Polymath-Kaila/ShadowTalk","demo":""},{"id":"linkstash","title":"LinkStash","tagline":"Offline-first mobile app for saving and organizing learning links","description":"LinkStash is an offline-first Android app designed for learners to save, organize, and quickly revisit useful links shared by mentors, friends, or discovered online. Built with Expo and React Native, the app uses SQLite for local storage, ensuring users can access and search their links instantly without needing a constant internet connection. Features include tagging for organization, fast full-text search, and backup/export functionality for data safety. By focusing on an offline-first architecture, LinkStash demonstrates how mobile apps can remain lightweight, reliable, and user-friendly even without server dependencies.","tech":["Expo","React Native","SQLite","JavaScript","TypeScript","Offline-First Architecture"],"images":["/images/projects/linkstash01.png","/images/projects/linkstash-2.png"],"github":"https://github.com/Polymath-Kaila/LinkStash","demo":""},{"id":"evote-system","title":"Simplest Voting System","tagline":"Fully electronic, University-automated voting from anywhere, anytime","description":"The Simplest Voting System is a fully electronic and automated platform designed to make elections accessible, transparent, and secure without the need for human supervisors. It allows aspirants to create profiles and share their manifestos, while voters can register, authenticate, and cast their votes from anywhere at any time. The system provides real-time score updates throughout the election period and automatically emails participants once the deadline is reached and the winner is declared. With its end-to-end digital process, this project demonstrates how technology can streamline democratic participation while ensuring fairness and efficiency.","tech":["Django","Django REST Framework (DRF)","PostgreSQL","Node.js (Realtime updates)","React.js","TailwindCSS","Email Notifications (SMTP)"],"images":["/images/projects/E-election1.png","/images/projects/evote-2.png"],"github":"https://github.com/Polymath-Kaila/E-election-system","demo":""},{"id":"oauth2-rbac-starter","title":"OAuth2 + RBAC Starter","tagline":"Minimal Node.js/Express app with Google OAuth2, roles, and JWT","description":"A minimal Node.js + Express project demonstrating how to combine Google OAuth2 authentication with role-based access control (RBAC) and JWT. Users sign up/auth via Google and are assigned one of two roles: merchant or client. Merchants can create and manage products via protected endpoints, while clients can browse available products. JWT is issued after OAuth2 login for stateless API access, and middleware enforces permissions per route. This serves as a hands-on introduction to building real-world apps that blend third-party OAuth with application roles and permissions.","tech":["Node.js","Express","Google OAuth2 (Passport.js)","JWT (jsonwebtoken)","RBAC Middleware","MongoDB (Mongoose) or PostgreSQL","Jest/Supertest "],"images":["/images/projects/outh21.jpeg","/images/projects/oauth2-rbac-2.png"],"github":"https://github.com/Polymath-Kaila/merchant-client-auth-app","demo":""},{"id":"deriv-fx-bot","title":"Deriv FX Trading Bot","tagline":"An AI trading bot that analyse and send signals plus automate trading","description":"An automated foreign-exchange trading bot built to help friends experiment with systematic strategies on the Deriv platform. The bot connects to Deriv’s API for live price data and order execution, applies configurable strategies (trend-following and mean-reversion variants), and enforces strict risk management (position sizing, max daily loss, and per-trade stopouts). It includes paper-trading and live modes, backtesting on historical data, and a lightweight dashboard for monitoring open positions, PnL, and logs. Designed as an educational tool to explore algorithmic trading workflows: data ingestion, signal generation, order routing, and post-trade analytics.","tech":["Python","WebSockets / REST (Deriv API)","Pandas","NumPy","TA-Lib","SQLite/CSV (trade logs)","streamlint (dashboard)","Docker "],"images":["/images/derive bot1.jpeg","/images/projects/derivbot-2.png"],"github":"YOUR_GITHUB_URL_HERE","demo":"","notes":"https://github.com/Polymath-Kaila/Derive-AI-bot"}]');

/***/ })

});